{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/symbol-observable/es/ponyfill.js","../node_modules/symbol-observable/es/index.js","../node_modules/is-observable/index.js","../node_modules/threads/dist/common.js","../node_modules/threads/dist/symbols.js","../node_modules/threads/dist/transferable.js","../node_modules/threads/dist/types/messages.js","../node_modules/threads/dist/worker/implementation.browser.js","../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/process/browser.js","../node_modules/threads/dist/worker/implementation.js","../node_modules/threads/dist/worker/index.js","../node_modules/threads/worker.js","worker-tensorflow.js"],"names":["symbolObservablePonyfill","root","result","Symbol","observable","self","window","global","module","Function","symbolObservable","require","default","exports","value","Boolean","process","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","setTimeout","e","clearTimeout","runTimeout","fun","call","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","nextTick","args","Array","arguments","i","push","Item","array","prototype","apply","title","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","importScripts","tf","setBackend","model","detectCat","imageName","img","foundCat","classify","predictions","forEach","prediction","classes","className","split","predictionClass","endsWith","objData","imageData","ImageData","Uint8ClampedArray","pixels","width","height","mobilenet","load","handleImage"],"mappings":"AEAA,ADAA,AIAA,ALAA,AMAA,ACAA,ACAA,ACAA,ACAA,AIAA;AHAA,ATCA,ADAA,ADAA,AMAA,ACAA,ACAA,ACAA,ACAA,AEDA,ACAA,ACCA;AHAA,ATCA,AGDA,ALCA,AMAA,ACAA,ACAA,ACAA,ACAA,AEDA,ACAA,IFAIgB,ENAEN,KMAK,GAAGF,MAAM,CAACK,CNAC,GAAGF,GMAX,GAAiB,CNAC,CMAhC,ANAiC,EMEjC,iBNFgC,CAAP,CAA6BC,OAAtD;AMGA,ATDA,AFAA,AMAA,ACAA,ACAA,ACAA,ACAA,AEDA,ACAA;AFGA,ATDA,AGDAJ,ALCA,AMAA,ACAA,ACAA,ACAA,ACAA,AEDA,ACAA,MRAM,CAACK,OAAP,GAAiBC,KAAK,IAAIC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACJ,gBAAD,CAAd,IAAoCI,KAAK,KAAKA,KAAK,CAACJ,gBAAD,CAAL,EAA/C,CAAjC;AMGA,ATDA,AFAA,AMAA,ACAA,ACAA,ACAA,ACAA,AEDA,ACAA;AXEA,AFAA,AMAA,ACAA,ACAA,ACAA,ACAA,AEDA,ACAA,AELA;AJQA,ATDA,AFAA,AGPe,AGOf,ACAA,ACAA,ACAA,ACAA,AEDA,ACAA,IFEIO,KRRoBjB,WQQxB,aRRe,CAAkCC,IAAlC,EAAwC;AQSvD,ATDA,AFAA,AIPA,ADAC,AGOD,AEAA,ACAA,ACAA,AEDA,ACAA,IFEIiB,ERRChB,MAAJ,UQQD;ATAA,AFAA,AGPC,AGOD,AEAA,ACAA,ACAA,AEDA,ACAA,MVNKC,MAAM,GAAGF,IAAI,CAACE,MAAlB;AQSD,ATDA,AFAA,AMAA,AEAA,ACAA,ACAA,AEDA,ACAA,AEPAsE,SJSStD,IITI,CAAC,WJSd,GAA4B,gDITf,CAAb;AJUI,ATDJ,AFAA,AGPC,AGOD,AEAA,ACAA,ACAA,AEDA,ACAA,AEPAsD,MZCK,EQQK,IAAIrD,CRRFjB,AYDC,CAAC,GJSJ,CAAU,CRRf,KAAkB,UAAtB,EAAkC,eQQzB,CAAN,2BITS,CAAb;AJUC,ATDD,AFAA,AIZA,ADKE,AGOF,AEAA,ACAA,ACAA,AEDA,ACAA,AEPAuE,EAAE,CAACC,KZCGxE,KYDN,CZCY,AYDE,CZCDC,IYDb,MZCE,EAAuB;ADQzB,AFAA,AIVA,ADGGF,AGOH,AEAA,ACAA,ACAA,AEDA,ACAA,AENA,IXHID,AWGA2E,EZAD1E,ECHH,CWGA,GZAS,GAAGC,MAAM,CAACC,UAAhB;AQQH,ATAA,AFAA,AGPG,AGOH,AEAA,ACAA,ACAA,AEDA,ACAA,KVRE,IQSOiB,ERPA,iBQOT,GAAgC;AAC5B,ATAJ,AFAA,AIVA,ADGGnB,AGOH,AEAA,ACAA,ACAA,AEDA,ACAA,ITTI,EDGDA,EQOO,CIPK2E,EXHJxE,COUGe,ARPL,GCHL,ADGQjB,EQOF,CAAU,EPVA,CDGF,CAAC,SCHnB,EAAiC,CDGf,CAAf,kBQOO,CAAN;AACH,ATAD,AFAA,AIVEF,ADGCE,AGOH,AEAA,ACAA,ACAA,AEDA,ACAA,ETTEF,IAAI,ADGHE,GCHME,GDGA,CCHP,ADGQD,UAAP,GAAoBF,MAApB;ADQH,AFAA,AIVC,ADGE,AGOH,AEAA,ACAA,ACAA,AEDA,ACAA,CTXA,MAEO,IAAI,OAAOI,MAAP,KAAkB,WAAtB,EAAmC;AOUzC,ATCD,AFAA,AIVEL,ADGA,AKOF,ACAA,ACAA,AEDA,ACAA,ETTEA,CDJD,GCIK,GAAGK,ADGD,IQMK,EPTX;AOUE,ATCJ,AFAA,AIVC,ADGCJ,AKOF,AEAA,AEDA,ACAA,CTXO,GDKLA,EQMM,CPTD,GDGC,CCHG,EDGA,KCHOK,MAAP,GDGT,ECH2B,WAAtB,EAAmC;AOUlC,ATCR,AFAA,AIVEN,ADGA,AKOF,AEAA,AEDA,ACAA,ETTEA,IAAI,EOSM,CPTHM,MOSUe,APTjB,UOSU,KAAsB,UAA1B,EAAsC;AAClCL,ATCZ,AFAA,AIVC,AIUD,AEAA,AEDA,ACAA,CTXO,KOWKA,CPTL,IAAI,OAAOT,IOSU,EPTjB,COSoBc,IPTF,MOSjB,KPTL,EAAmC;AOUjC,ATCT,AFAA,AIVErB,ADGD,AKOD,AEAA,AEDA,ACAA,ETTEA,GOOM,CPPF,GAAGO,ADGDN,EQMO,IPTb,ADGD,aYPD,kBAAyB0E,KAAzB,EAAgCE,SAAhC,EAA2CC,GAA3C;AJcY9D,ATCZ,AFAA,AIVC,ADGA,AKOD,AEAA,AEDA,ACAA,AEdA,CXGO,KOWKA,CPTL,eOSqB,GAAGE,gBAAnB;AACH,ATCT,AFAA,AIVElB,AIUF,AEAA,AEDA,ACAA,AEfA,EXMEA,IAAI,GAAGQ,QAAQ,CAAC,aAAD,CAAR,EAAP;AOUG,ATCL,AFAA,AIVC,ADCA,AKSD,AEAA,AEDA,ACAA,AEhBA,GJUI,CAME,OAAOc,CAAP,EAAU;AACRN,ATCR,AFAA,AQAA,AIDA,ACAA,AEjBA,IJiBQA,gBAAgB,GAAGE,gBAAnB;AACH,ATCL,AFAA,AIVA,ASSA,AElBA,IXSIjB,MAAM,GAAG,uBAASD,IAAT,CAAb;AFWA,AFAA,AaDA,AElBQ+E,YAAAA,GXSO9E,KWVf,GACmB,KADnB;AJmBI,ATEJ,AFAA,AaDA,AEpBA,MJmBQ;AACA,ATER,AFAA,AaDA,AErBA,QJoBY,OAAOsB,IIlBWoD,KAAK,CAACK,EJkBxB,KAAwB,CIlBN,CAAeF,GAAf,CAF9B,IJoBQ,EAAwC;AACpC7D,ATEZ,AFAA,AaDA,MFDYA,kBAAkB,GAAGM,YAArB;AACH,ATET,AFAA,AaDA,AEvBA,KJoBQ,MAEO;AACHN,ATEZ,AFAA,AaDA,AEtBUgE,MJqBEhE,MIrBFgE,WAFV,CJuB8B,GAAG7D,mBAArB;AACH,ATET,AFAA,AaDA,AEtBI6D,YAAAA,WAAW,CAACC,OAAZ,CAAoB,UAACC,UAAD,EAAgB;AJsBnC,ATEL,AFAA,AaDA,AEtBQ,GJeJ,CAME,OAAO7D,CAAP,EAAU,IIrBF8D,OAAO,GAAGD,UAAU,CAACE,SAAX,CAAqBC,KAArB,CAA2B,GAA3B,CAAhB;AJsBArE,ATER,AFAA,AaDA,AEtBQmE,IJqBAnE,UIrBAmE,OAAO,CJqBW,AIrBVF,GJqBa9D,IIrBrB,CAAgB,UAACmE,IJqBjB,WIrBgB,EAAqB;AJsBxC,AXEL,AaDA,AEtBY,oBAAIA,eAAe,CAACC,QAAhB,CAAyB,KAAzB,CAAJ,EAAqC;AJsBhD,AXED,AaDA,AEtBgBT,CJEf,GAAD,cIFgBA,QAAQ,GAAG,IAAX;AfwBhB,AaDA,AEtBa;AJqBb,AXGA,AaDA,AEtBS,SJoBAvD,MIxBD,IJwBR,CAAoBC,GAApB,EAAyB;AACrB,AXGJ,AaDA,AEtBK,MJoBGT,OI3BJ,SJ2BoB,KAAKK,UAAzB,EAAqC;AACjC,AXGR,AaDA,AEjCA,8CAWW0D,QAXX;AJgCQ,AXGR,AaDA,WFFe1D,UAAU,CAACI,GAAD,EAAM,CAAN,CAAjB;AACH,AXGL,AaDA,AEnCA,GJ6ByB,CAKrB;AXGJ,AaDA,AEpCA;AfsCA,AaDA,AErCA;AJmCI,AXIJ,AaDA,AEtCA,MJmCQ,CAACT,gBAAgB,KAAKE,gBAArB,IAAyC,CAACF,gBAA3C,KAAgEK,UAApE,EAAgF;AAC5EL,AXIR,AaDA,AEvCA,IJoCQA,gBAAgB,GAAGK,UAAnB;AACA,AXIR,AaDA,AExCA,WJqCeA,UAAU,CAACI,GAAD,EAAM,CAAN,CAAjB;AACH,AXIL,AaDA,AEzCA;Af2CA,AaDA;AFHI,AXKJ,AaDA,MFJQ;AACA,AXKR,AaDA;AFHQ,AXKR,AaDA,AE/BA,WJ2BeT,gBAAgB,CAACS,GAAD,EAAM,CAAN,CAAvB;AACH,AXKL,AaDA,AEhCA,GJyBI,CAGE,OAAMH,CAAN,EAAQ;AACN,AXKR,AaDA,AEjCA,QJ6BY;AACA,AXKZ,AaDA,AElCA;AJ+BY,AXKZ,AaDA,AEnCA,aJ+BmBN,gBAAgB,CAACU,IAAjB,CAAsB,IAAtB,EAA4BD,GAA5B,EAAiC,CAAjC,CAAP;AACH,AXKT,AaDA,AEpCA,KJ6BQ,CAGE,OAAMH,CAAN,EAAQ,YIhCX,iBAA2BmE,OAA3B;AJiCK,AXKZ,AaDA,AErCO;AJkCK,AXKZ,AaDA,AEtCO,aJkCYzE,gBAAgB,CAACU,IAAjB,CAAsB,IAAtB,EAA4BD,GAA5B,EAAiC,CAAjC,CAAP;AACH,AXKT,AaDA,AEvCO;AJoCF,AXKL,AaDA,AExCO;AJuCN,AXGD,AaDA,AEzCO;Af2CP,AaDA,AEzCYoD,YAAAA,SADL,GACiBY,OAAO,CAACvB,IADzB;AJwCP,AXIA,AaDA,AEzCYwB,SJsCH/D,GItCG+D,SAFL,GJwCP,AItCwB,CJsCC9D,GItCG+D,GJsC5B,EAAiC,IItCT,CACZ,IAAIC,iBAAJ,CAAsBH,OAAO,CAACI,MAA9B,CADY,EAEZJ,OAAO,CAACK,KAFI,EAGZL,OAAO,CAACM,MAHI,CAFjB;AJyCH,AXIJ,AaDA,MFHQ9E,kBAAkB,KAAKM,YAA3B,EAAyC;AACrC,AXIR,AaDA,AE7CO,gBAOMoD,KAPN;AJ2CC,AXIR,AaDA,AE9CO,WJ2CQpD,YAAY,CAACK,MAAD,CAAnB;AACH,AXIL,AaDA,AE/CO,GJwC0B,CAK7B;AXIJ,AaDA,AEhDO;AfkDP,AaDA;AFHI,AXKJ,AaDA,AElDO,MJ8CC,CAACX,kBAAkB,KAAKG,mBAAvB,IAA8C,CAACH,kBAAhD,KAAuEM,YAA3E,EAAyF;AACrFN,AXKR,AaDA,AEnDO,IJ+CCA,eIvCkB+E,GJuCA,GAAGzE,GIvCM,CAAC0E,IAAV,EARnB,EJ+CC;AACA,AXKR,AaDA,WFJe1E,YAAY,CAACK,MAAD,CAAnB;AACH,AXKL,AaDA,AErDO;AfuDP,AaDA,AE9CY+C,YAAAA,KARL;AJkDH,AXMJ,AaDA,AEvDO,MJkDC;AACA,AXMR,AaDA,AExDO,mBASkBC,SAAS,CAACD,KAAD,EAAQE,SAAR,EAAmBa,SAAnB,CAT3B;AJoDC,AXMR,AaDA,WFLezE,kBAAkB,CAACW,MAAD,CAAzB;AACH,AXML,AaDA,AE1DO,GJkDH,CAGE,OAAON,CAAP,EAAS;AACP,AXMR,AaDA,AE3DO,QJsDK;AACA,AXMZ,AaDA;AFJY,AXMZ,AaDA,AE7DO,aJwDYL,kBAAkB,CAACS,IAAnB,CAAwB,IAAxB,EAA8BE,MAA9B,CAAP;AACH,AXMT,AaDA,AE9DO,KJsDC,CAGE,OAAON,CAAP,EAAS;AACP,AXMZ,AaDA,AE/DO,mBAWkBsD,SAAS,CAACD,KAAD,EAAQE,SAAR,EAAmBa,SAAnB,CAX3B;AJ2DK,AXMZ,AaDA;AFJY,AXMZ,AaDA,AEjEO,aJ4DYzE,kBAAkB,CAACS,IAAnB,CAAwB,IAAxB,EAA8BE,MAA9B,CAAP;AACH,AXMT,AaDA,AElEO;AJ8DF,AXML,AaDA;AFDC,AXGD,AaDA,AEpEO;AfsEP,AaDA,AErEO;AJmEP,AXIA,AaDA,AEtEO,IJmEHC,KAAK,GAAG,EAAZ;AACA,AXIA,AaDA,AEvEO,IJoEHC,QAAQ,GAAG,KAAf;AACA,AXIA,AaDA,AExEO,IJqEHC,YAAJ;AACA,AXIA,AaDA,AEzEO,IJsEHC,UAAU,GAAG,CAAC,CAAlB;AXKA,AaDA,AE1EO,GAAP;AJwEA,AXIA,AaDA,SFHSC,eAAT,GAA2B;AACvB,AXIJ,AaDA,AE5EA,MJyEQ,CAACH,IIzEaoE,IJyEd,IAAa,CAACnE,EIzEtB,UJyEI,EAAgC;AAC5B,AXIR,AaDA,AE7EA;AJ2EK,AXIL,AaDA,AE9EA;AfgFA,AaDA;AFHID,AXKJ,AaDA,AEhFA,EJ4EIA,OI5EkBoE,CJ4EV,GAAG,KAAX,EI5EJ;AfkFA,AaDA,AEjFA;AJ6EI,AXMJ,AaDA,MFLQnE,YAAY,CAACG,MAAjB,EAAyB;AACrBL,AXMR,AaDA,IFLQA,KAAK,GAAGE,YAAY,CAACI,MAAb,CAAoBN,KAApB,CAAR;AACH,AXML,AaDA,GFPI,MAEO;AACHG,AXMR,AaDA,IFLQA,UAAU,GAAG,CAAC,CAAd;AACH,AXML,AaDA;AbEA,AaDA;AFLI,AXOJ,AaDA,MFNQH,KAAK,CAACK,MAAV,EAAkB;AACdE,AXOR,AaDA,IFNQA,UAAU;AACb,AXOL,AaDA;AFLC,AXOD,AaDA;AbEA,AaDA;AFLA,AXOA,AaDA,SFNSA,UAAT,GAAsB;AAClB,AXOJ,AaDA,MFNQN,QAAJ,EAAc;AACV,AXOR,AaDA;AFLK,AXOL,AaDA;AbEA,AaDA;AFNI,AXQJ,AaDA,MFPQO,OAAO,GAAGb,UAAU,CAACS,eAAD,CAAxB;AACAH,AXQJ,AaDA,EFPIA,QAAQ,GAAG,IAAX;AAEA,AXOJ,AaDA,MFNQQ,GAAG,GAAGT,KAAK,CAACK,MAAhB;AXQJ,AaDA;AFNI,AXQJ,AaDA,SFPUI,GAAN,EAAW;AACPP,AXQR,AaDA,IFPQA,YAAY,GAAGF,KAAf;AACAA,AXQR,AaDA,IFPQA,KAAK,GAAG,EAAR;AXSR,AaDA;AFPQ,AXSR,AaDA,WFRe,EAAEG,UAAF,GAAeM,GAAtB,EAA2B;AACvB,AXSZ,AaDA,UFRgBP,YAAJ,EAAkB;AACdA,AXShB,AaDA,QFRgBA,YAAY,CAACC,UAAD,CAAZ,CAAyBO,GAAzB;AACH,AXSb,AaDA;AFPS,AXST,AaDA;AbEA,AaDA;AFRQP,AXUR,Aa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":"worker-tensorflow.249d79e3.js","sourceRoot":"../src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","'use strict';\nconst symbolObservable = require('symbol-observable').default;\n\nmodule.exports = value => Boolean(value && value[symbolObservable] && value === value[symbolObservable]());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction rehydrateError(error) {\n    return Object.assign(Error(error.message), {\n        name: error.name,\n        stack: error.stack\n    });\n}\nexports.rehydrateError = rehydrateError;\nfunction serializeError(error) {\n    return {\n        message: error.message,\n        name: error.name,\n        stack: error.stack\n    };\n}\nexports.serializeError = serializeError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.$errors = Symbol(\"thread.errors\");\nexports.$events = Symbol(\"thread.events\");\nexports.$terminate = Symbol(\"thread.terminate\");\nexports.$transferable = Symbol(\"thread.transferable\");\nexports.$worker = Symbol(\"thread.worker\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbols_1 = require(\"./symbols\");\nfunction isTransferable(thing) {\n    if (!thing || typeof thing !== \"object\")\n        return false;\n    // Don't check too thoroughly, since the list of transferable things in JS might grow over time\n    return true;\n}\nfunction isTransferDescriptor(thing) {\n    return thing && typeof thing === \"object\" && thing[symbols_1.$transferable];\n}\nexports.isTransferDescriptor = isTransferDescriptor;\nfunction Transfer(payload, transferables) {\n    if (!transferables) {\n        if (!isTransferable(payload))\n            throw Error();\n        transferables = [payload];\n    }\n    return {\n        [symbols_1.$transferable]: true,\n        send: payload,\n        transferables\n    };\n}\nexports.Transfer = Transfer;\n","\"use strict\";\n/////////////////////////////\n// Messages sent by master:\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MasterMessageType;\n(function (MasterMessageType) {\n    MasterMessageType[\"run\"] = \"run\";\n})(MasterMessageType = exports.MasterMessageType || (exports.MasterMessageType = {}));\n////////////////////////////\n// Messages sent by worker:\nvar WorkerMessageType;\n(function (WorkerMessageType) {\n    WorkerMessageType[\"error\"] = \"error\";\n    WorkerMessageType[\"init\"] = \"init\";\n    WorkerMessageType[\"result\"] = \"result\";\n    WorkerMessageType[\"running\"] = \"running\";\n    WorkerMessageType[\"uncaughtError\"] = \"uncaughtError\";\n})(WorkerMessageType = exports.WorkerMessageType || (exports.WorkerMessageType = {}));\n","\"use strict\";\n/// <reference lib=\"dom\" />\n// tslint:disable no-shadowed-variable\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isWorkerRuntime = function isWorkerRuntime() {\n    return typeof self !== \"undefined\" && self.postMessage ? true : false;\n};\nconst postMessageToMaster = function postMessageToMaster(data, transferList) {\n    self.postMessage(data, transferList);\n};\nconst subscribeToMasterMessages = function subscribeToMasterMessages(onMessage) {\n    const messageHandler = (messageEvent) => {\n        onMessage(messageEvent.data);\n    };\n    const unsubscribe = () => {\n        self.removeEventListener(\"message\", messageHandler);\n    };\n    self.addEventListener(\"message\", messageHandler);\n    return unsubscribe;\n};\nexports.default = {\n    isWorkerRuntime,\n    postMessageToMaster,\n    subscribeToMasterMessages\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n// tslint:disable no-var-requires\n/*\n * This file is only a stub to make './implementation' resolve to the right module.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst implementation_browser_1 = __importDefault(require(\"./implementation.browser\"));\nconst implementation_tiny_worker_1 = __importDefault(require(\"./implementation.tiny-worker\"));\nconst implementation_worker_threads_1 = __importDefault(require(\"./implementation.worker_threads\"));\nconst runningInNode = typeof process !== 'undefined' && process.arch !== 'browser' && 'pid' in process;\nfunction selectNodeImplementation() {\n    try {\n        implementation_worker_threads_1.default.testImplementation();\n        return implementation_worker_threads_1.default;\n    }\n    catch (error) {\n        return implementation_tiny_worker_1.default;\n    }\n}\nexports.default = runningInNode\n    ? selectNodeImplementation()\n    : implementation_browser_1.default;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst is_observable_1 = __importDefault(require(\"is-observable\"));\nconst common_1 = require(\"../common\");\nconst transferable_1 = require(\"../transferable\");\nconst messages_1 = require(\"../types/messages\");\nconst implementation_1 = __importDefault(require(\"./implementation\"));\nvar transferable_2 = require(\"../transferable\");\nexports.Transfer = transferable_2.Transfer;\nlet exposeCalled = false;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => is_observable_1.default(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return transferable_1.isTransferDescriptor(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: messages_1.WorkerMessageType.error,\n        uid,\n        error: common_1.serializeError(error)\n    };\n    implementation_1.default.postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: messages_1.WorkerMessageType.result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    implementation_1.default.postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: messages_1.WorkerMessageType.running,\n        uid,\n        resultType\n    };\n    implementation_1.default.postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    const errorMessage = {\n        type: messages_1.WorkerMessageType.uncaughtError,\n        error: common_1.serializeError(error)\n    };\n    implementation_1.default.postMessageToMaster(errorMessage);\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            syncResult.subscribe(value => postJobResultMessage(jobUID, false, value), error => postJobErrorMessage(jobUID, error), () => postJobResultMessage(jobUID, true));\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, result);\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, error);\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nfunction expose(exposed) {\n    if (!implementation_1.default.isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args);\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args);\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n}\nexports.expose = expose;\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n","module.exports = require(\"./dist/worker/index\")\n","import { expose } from \"threads/worker\";\n\nimportScripts(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js\");\nimportScripts(\"https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0\");\ntf.setBackend('cpu');\n\nlet model;\n\nasync function detectCat(model, imageName, img) {\n    let foundCat = false;\n    const predictions = await model.classify(img);\n    predictions.forEach((prediction) => {\n        const classes = prediction.className.split(\",\");\n        classes.forEach((predictionClass) => {\n            if (predictionClass.endsWith(\"cat\")) {\n                foundCat = true;\n            }\n        });\n    });\n    return foundCat;\n}\n\nexpose(async function handleImage(objData) {\n        let imageName = objData.name;\n        let imageData = new ImageData(\n            new Uint8ClampedArray(objData.pixels),\n            objData.width,\n            objData.height\n        );\n        if (!model) {\n            model = await mobilenet.load();\n            return await detectCat(model, imageName, imageData);\n        } else {\n            return await detectCat(model, imageName, imageData);\n        }\n    }\n);"]}